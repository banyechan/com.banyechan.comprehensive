<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.banyechan.banyechan_escape_path.mapper.EdgeMapper">
  <resultMap id="BaseResultMap" type="com.banyechan.banyechan_escape_path.entity.Edge">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="point_id" jdbcType="INTEGER" property="pointId" />
    <result column="end_point_id" jdbcType="INTEGER" property="endPointId" />
    <result column="distance" jdbcType="DOUBLE" property="distance" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, point_id, end_point_id, distance,state, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from edge
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="listByMap" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from edge
  </select>

  <select id="listMapTest"  parameterType="java.lang.Integer" resultType="java.util.HashMap" >
      select
      point_id as pointId,
      count(*) as num
      from edge
      where state = #{state}
      group by point_id
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from edge
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.banyechan.banyechan_escape_path.entity.Edge">
    insert into edge (id, point_id, end_point_id, 
      distance, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{pointId,jdbcType=INTEGER}, #{endPointId,jdbcType=INTEGER}, 
      #{distance,jdbcType=DOUBLE}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.banyechan.banyechan_escape_path.entity.Edge">
    insert into edge
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="pointId != null">
        point_id,
      </if>
      <if test="endPointId != null">
        end_point_id,
      </if>
      <if test="distance != null">
        distance,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="pointId != null">
        #{pointId,jdbcType=INTEGER},
      </if>
      <if test="endPointId != null">
        #{endPointId,jdbcType=INTEGER},
      </if>
      <if test="distance != null">
        #{distance,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.banyechan.banyechan_escape_path.entity.Edge">
    update edge
    <set>
      <if test="pointId != null">
        point_id = #{pointId,jdbcType=INTEGER},
      </if>
      <if test="endPointId != null">
        end_point_id = #{endPointId,jdbcType=INTEGER},
      </if>
      <if test="distance != null">
        distance = #{distance,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.banyechan.banyechan_escape_path.entity.Edge">
    update edge
    set point_id = #{pointId,jdbcType=INTEGER},
      end_point_id = #{endPointId,jdbcType=INTEGER},
      distance = #{distance,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>